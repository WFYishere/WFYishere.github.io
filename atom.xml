<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WFY&#39;s Blog</title>
  
  <subtitle>Full Snack Developer</subtitle>
  <link href="https://wfyishere.github.io/atom.xml" rel="self"/>
  
  <link href="https://wfyishere.github.io/"/>
  <updated>2025-02-06T09:33:17.559Z</updated>
  <id>https://wfyishere.github.io/</id>
  
  <author>
    <name>Wen Fanyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[CF] 520B - Two Buttons</title>
    <link href="https://wfyishere.github.io/2025/02/06/CF-520B-Two-Buttons/"/>
    <id>https://wfyishere.github.io/2025/02/06/CF-520B-Two-Buttons/</id>
    <published>2025-02-06T04:30:57.000Z</published>
    <updated>2025-02-06T09:33:17.559Z</updated>
    
    <content type="html"><![CDATA[<p>Interesting problem with a much easier solution using mathematical methods.</p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p><strong>Idea</strong>: Use BFS to solve the problem. Imagine each node as the current displayed number <code>i</code>, the path from <code>n</code> to <code>i</code> is how we press the button to arrive at <code>i</code>. Using BFS, we are garuanteed that the first time that we see <code>m</code>, the path from <code>n</code> to <code>m</code> would be the shortest path.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> MAX = <span class="number">10000</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> cnt[MAX<span class="number">+1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(n);</span><br><span class="line">    <span class="type">int</span> curr = <span class="number">0</span>;</span><br><span class="line">    cnt[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (curr != m &amp;&amp; !q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        curr = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (((curr - <span class="number">1</span>) &gt; <span class="number">0</span>) &amp;&amp; ((curr<span class="number">-1</span>) &lt;= MAX) &amp;&amp; cnt[curr<span class="number">-1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((curr - <span class="number">1</span>) == m) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cnt[curr] + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[curr - <span class="number">1</span>] = cnt[curr] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(curr - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (((curr * <span class="number">2</span>) &gt; <span class="number">0</span> ) &amp;&amp; ((curr * <span class="number">2</span>) &lt;= MAX) &amp;&amp; cnt[curr*<span class="number">2</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((curr * <span class="number">2</span>) == m) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cnt[curr] + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[curr * <span class="number">2</span>] = cnt[curr] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(curr * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cnt[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>Solution 1 is the solution that I have gave. The time complexity should be o(n).</p><p>Solution 2 is a more mathematical solution. This problem is equivalent to: how to reach from <code>m</code> to <code>n</code> given two operations <code>+1</code> and <code>/2</code>. </p><p>Observe that the operation <code>+1 +1 /2</code> is equivalent to <code>/2 +1</code>, while the later takes less step. That means that consecutive <code>+1</code> would only appear at the end of the “optimal operation list”, because consecutive <code>+1</code> should not appear before any <code>/2</code> (otherwise it would be replaced by <code>/2 +1</code>). </p><p>This means that the optimal operation would look something like: some consecutive <code>/2</code>, some consecutive <code>+1 /2</code> followed by consecutive <code>+1</code>.</p><p>This means that the optimal solution is: when <code>m</code> is larger than <code>n</code>, we either <code>/2</code> if m is even, or <code>+1 /2</code> if m is odd. Until at some point <code>m</code> is smaller than <code>n</code>, then we keep <code>+1</code>. (See proof)</p><p>Furthermore, we can summarize that for given two kinds of operations <code>+b</code> and <code>/a</code>, where <code>b</code> and <code>a</code> are coprime, the only possible solution should be when <code>m</code> is larger than <code>n</code>, we <code>/a</code> whenerver <code>a</code> divides <code>m</code>, or <code>+b</code> until the current number divides <code>a</code>. When the current number is smaller than <code>n</code>, we keep <code>+b</code>.</p><p>*Proof: </p><p>imagine <code>dp[i]</code> denotes the minimal number of times to press the button from <code>i</code> to <code>n</code>.</p><p>In this case, when <code>i</code> is larger than <code>n</code>:</p><ol><li><p><code>i</code> is not a multiple of <code>a</code>: <code>dp[i] = k + dp[i+kb]</code>. where <code>i+kb</code> is the minimal number that is a multiple of a(k &gt; 0). I.e. In this situation, the only thing you can do is <code>+b</code>, until at some point we have the opportunity to choose<code>/a</code>, which would lead to the second scenario.</p></li><li><p><code>i</code> is a multiple of <code>a</code>: In this case, <code>dp[i] = min&#123;dp[i+b], dp[i/a]&#125; + 1</code>. However, note that <code>dp[i+b]</code> goes back to the first scenario, which means that <code>dp[i+b] = a - 1 + dp[i+ab]</code>. Thus, <code>dp[i] = min&#123;dp[i+ab] + a, dp[i/a] + 1&#125;</code>. However, since <code>i</code> is larger than <code>n</code>, we know if we chose the <code>dp[i+ab] + a</code> part, at some point we have to divide by <code>a</code> to reach <code>n</code>. Suppose we decide to divide by <code>a</code> when we reach <code>i+kab</code>. That means, we reach <code>i/a+kb</code> by adding <code>b</code> <code>ka</code> times and dividing <code>a</code> 1 time. However, by the previous observation, we know that it would take less step if we divide a first and add <code>b</code> <code>k</code> times.</p></li></ol><p>When <code>i</code> is smaller than <code>n</code>: add b (?)</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>Interesting problem. Hope I can prove it later.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Interesting problem with a much easier solution using mathematical methods.&lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    <category term="Unsolved" scheme="https://wfyishere.github.io/categories/Unsolved/"/>
    
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
    <category term="Math" scheme="https://wfyishere.github.io/tags/Math/"/>
    
    <category term="BFS" scheme="https://wfyishere.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>[CF] 279B - Books</title>
    <link href="https://wfyishere.github.io/2025/01/27/CF-279B-Books/"/>
    <id>https://wfyishere.github.io/2025/01/27/CF-279B-Books/</id>
    <published>2025-01-27T13:17:16.000Z</published>
    <updated>2025-01-27T13:21:05.271Z</updated>
    
    <content type="html"><![CDATA[<p>Easy question but I thought of it in a too difficult way.</p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p><strong>Idea</strong>: Notice that for each <code>i</code>th book, we just need to find <code>r_i</code> such that the sum of the time from <code>i</code> to <code>r_i</code>th book is smaller than <code>t</code>. We can also notice that r_i is not descending, so each time we calculate <code>r_i</code> from <code>r_&#123;i-1&#125;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>Similar Idea but <a class="link"   href="https://codeforces.com/blog/entry/95148" >much more descent code<i class="fas fa-external-link-alt"></i></a>.</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>You shouldn’t solve a question from strange or fancy techniques. Try solving a question from the most bruteforce way and gradually decrease the question.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Easy question but I thought of it in a too difficult way.&lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
    <category term="BruteForce" scheme="https://wfyishere.github.io/tags/BruteForce/"/>
    
  </entry>
  
  <entry>
    <title>[CF] 455A - Boredom</title>
    <link href="https://wfyishere.github.io/2025/01/26/CF-455A-Boredom/"/>
    <id>https://wfyishere.github.io/2025/01/26/CF-455A-Boredom/</id>
    <published>2025-01-26T05:32:07.000Z</published>
    <updated>2025-01-26T05:45:09.884Z</updated>
    
    <content type="html"><![CDATA[<p>I thought of a different approach to the question, not sure if it will work. </p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p><strong>Idea</strong>: The final score that we get &#x3D; <code>sum - sum_deleted</code>, which means that we are trying to minimize the sum of integers that we deleted.</p><p>Each time we choose <code>a_k</code>, we delete <code>deleted[a_k] = count[a_&#123;k-1&#125;] * a_&#123;k-1&#125; + count[a_&#123;k+1&#125;] * a_&#123;k+1&#125;</code>, where <code>count[a_k]</code> denotes the number of <code>a_k</code>. So is it possible to greedily search for the minimal <code>deleted[a_k]</code> each time and delete them? I am not sure if this will lead to optimal solution.</p><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>Use dynamic programming. For each integer <code>a_k</code>, we either choose it or delete it. So we can do dp from the largest integer that we have: </p><ol><li>Suppose <code>dp[k]</code> denotes the largest score that we can have with the array of integers given and delete all the integers larger than k. So for test case</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">1 2 2 3 3 3 4 4 4 4 </span><br></pre></td></tr></table></figure><p><code>dp[2]</code> would denote the largest score that we can get from array <code>1 2 2</code></p><ol start="2"><li><code>dp[k]</code> can be degraded to situation where either we choose <code>k</code> or not choose <code>k</code>. If we choose <code>k</code>, then <code>k-</code> would also be deleted, which would be <code>dp[k-2] + cnt[k] * k</code>. If we don’t choose <code>k</code>, then it would be the same as <code>dp[k-1]</code>. So the dp formula:</li></ol><p><code>dp[k] = max(&#123;dp[k-2] + cnt[k] * k, dp[k-1]&#125;)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> max_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        cnt[a]++;</span><br><span class="line">        max_num = <span class="built_in">max</span>(a,max_num);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>] = cnt[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= max_num; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(&#123;dp[i<span class="number">-1</span>], dp[i<span class="number">-2</span>] + (<span class="type">long</span> <span class="type">long</span>)cnt[i] * i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%I64d&quot;</span>, dp[max_num]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>I didn’t thought about dynamic programming ways to solve this problem. I guess the best way to come up with a dp solution is to degrade the question to easier scenarios. I think this question is actually a typical “choose or not” type of dp problem.</p><p>Also, still not sure whether my solution will work. I will think about it when I am better :D</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I thought of a different approach to the question, not sure if it will work. &lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    <category term="Unsolved" scheme="https://wfyishere.github.io/categories/Unsolved/"/>
    
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
    <category term="DynamicProgramming" scheme="https://wfyishere.github.io/tags/DynamicProgramming/"/>
    
  </entry>
  
  <entry>
    <title>[CF] 189A - Cut Ribbon</title>
    <link href="https://wfyishere.github.io/2025/01/24/CF-189A-Cut-Ribbon/"/>
    <id>https://wfyishere.github.io/2025/01/24/CF-189A-Cut-Ribbon/</id>
    <published>2025-01-24T14:28:57.000Z</published>
    <updated>2025-01-24T14:35:05.917Z</updated>
    
    <content type="html"><![CDATA[<p>A simple dynamic programming question.</p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p>Simply use dynamic programming. use dp[i] to indicate the maximum number of pieces for lenth i. The fromula would be <code>dp[i] = 1 + max(&#123;dp[i-a], dp[i-b], dp[i-c]&#125;)</code></p><p><strong>Idea</strong>: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, a, b, c;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">4001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">piece</span><span class="params">(<span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-8000</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (dp[len] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[len];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dp[len] = <span class="built_in">max</span>(&#123;<span class="built_in">piece</span>(len-a), <span class="built_in">piece</span>(len-b), <span class="built_in">piece</span>(len-c)&#125;) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> dp[len];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;a, &amp;b, &amp;c);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;a, b, c&#125;; </span><br><span class="line">    <span class="built_in">sort</span>(arr, arr + <span class="number">3</span>);</span><br><span class="line">    a = arr[<span class="number">0</span>];</span><br><span class="line">    b = arr[<span class="number">1</span>];</span><br><span class="line">    c = arr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">piece</span>(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>The problem is to maximize x+y+z subject to ax+by+cz&#x3D;n. Constraints are low, so simply iterate over two variables (say x and y) and find the third variable (if any) from the second equation. Find the maximum over all feasible solutions.</p><p>Or use DP.</p><p>Probably bruteforce takes less space, time complexity for DP is <code>O(n / a)</code>, for bruteforce is the same.</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>Easy DP question.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;A simple dynamic programming question.&lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
    <category term="DynamicProgramming" scheme="https://wfyishere.github.io/tags/DynamicProgramming/"/>
    
  </entry>
  
  <entry>
    <title>[CF] 230B - T-primes</title>
    <link href="https://wfyishere.github.io/2025/01/22/CF-230B-T-primes/"/>
    <id>https://wfyishere.github.io/2025/01/22/CF-230B-T-primes/</id>
    <published>2025-01-22T06:10:30.000Z</published>
    <updated>2025-01-24T07:25:00.818Z</updated>
    
    <content type="html"><![CDATA[<p>A simple problem on identifying prime numbers</p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p><strong>Idea</strong>: It’s not hard to realize that we are looking for squared prime numbers. So for each number, we check whether it’s a squared number, if yes, then we check whether the square root is a prime number</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> m = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(x));</span><br><span class="line">        <span class="keyword">if</span> (m * m != x <span class="keyword">or</span> x == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(m));</span><br><span class="line">            <span class="type">bool</span> is_prime = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= s; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m % i == <span class="number">0</span>) &#123;</span><br><span class="line">                    is_prime = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is_prime) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>Since range of x is <code>x &lt;= 10^12</code>, square root of x is <code>sqrt(x) &lt; 10^6</code> So we can try to precompute all possible prime numbers using <a class="link"   href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#:~:text=This%20algorithm%20produces%20all%20primes,as%20is%20usually%20the%20case." >Sieve of Eratosthenes<i class="fas fa-external-link-alt"></i></a></p><p>Store these prime numbers in a set and square it. Now for each input, we just need to check if it is in the set.</p><p>The code can be found <a class="link"   href="https://web.archive.org/web/20161225205232/http://pastie.org/4897166#10,13,15" >here<i class="fas fa-external-link-alt"></i></a></p><p>The time complexity is <code>O(sqrt(m) log log sqrt(m) + n * log(m_prime))</code>, where <code>m</code> is the upper bound of x, <code>m_prime</code> is the number of prime numbers within the 1 to <code>sqrt(m)</code>.</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>Sometimes it’s better to precompute stuff.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;A simple problem on identifying prime numbers&lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    
    <category term="Algorithms" scheme="https://wfyishere.github.io/tags/Algorithms/"/>
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>[CF] 4C - Registration System</title>
    <link href="https://wfyishere.github.io/2025/01/21/CF-4C-Registration-System/"/>
    <id>https://wfyishere.github.io/2025/01/21/CF-4C-Registration-System/</id>
    <published>2025-01-21T14:15:33.000Z</published>
    <updated>2025-01-24T07:25:11.786Z</updated>
    
    <content type="html"><![CDATA[<p>I learned some basics of C&#x2F;C++, including scanf and cin, how to use hashMap in C, etc.</p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p>Store the value in a hashMap, use the name as key and the number of times it appeared as value and just store+print.</p><p><strong>Idea</strong>: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    unordered_map &lt;string, <span class="type">int</span>&gt; hashMap;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp);</span><br><span class="line">        <span class="function">string <span class="title">user_name</span><span class="params">(temp)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (hashMap.<span class="built_in">count</span>(user_name) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            hashMap[user_name] ++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s%d\n&quot;</span>, user_name.<span class="built_in">c_str</span>(), hashMap[user_name]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap[user_name] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>pretty much the same</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>I learned how to use C++ documentations to checkup functions</p><p>Also, a bit about how to use hashMap in C++</p><p>Also learned a bit about scanf and cin differences and how to mix C with C++ to write code (because scanf(C) is faster but C++ provides some good libraries.)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I learned some basics of C&amp;#x2F;C++, including scanf and cin, how to use hashMap in C, etc.&lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
    <category term="Bruteforce" scheme="https://wfyishere.github.io/tags/Bruteforce/"/>
    
    <category term="HashMap" scheme="https://wfyishere.github.io/tags/HashMap/"/>
    
    <category term="C" scheme="https://wfyishere.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>[CF] 25A - IQ test</title>
    <link href="https://wfyishere.github.io/2025/01/20/CF-25A-IQ-test/"/>
    <id>https://wfyishere.github.io/2025/01/20/CF-25A-IQ-test/</id>
    <published>2025-01-20T14:15:11.000Z</published>
    <updated>2025-01-20T14:26:06.587Z</updated>
    
    <content type="html"><![CDATA[<p>My Very First CF problemset</p><span id="more"></span><h3 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h3><p><strong>Idea</strong>: we don’t need information from previous numbers, we only need three information: </p><ol><li>the common eveness <code>a</code></li><li>the current number <code>b</code></li><li>the index of the current number <code>num</code></li></ol><p>We also have a special case for when the first two numbers are different, in this situation we don’t know which number is the more common one. Thus we only need to look at the 3rd number.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, a, b, c, num = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    a = a % <span class="number">2</span>;</span><br><span class="line">    b = b % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &lt; n) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">if</span> (b % <span class="number">2</span> != a) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">        <span class="keyword">if</span> (c % <span class="number">2</span> == a) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Official-Solution"><a href="#Official-Solution" class="headerlink" title="Official Solution"></a>Official Solution</h3><p>count the number of odd numbers and even numbers, store the last odd and last even, and do it bruteforcely.</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>I guess the two solutions start from two different ways but they probably have a similar time and space achievement. </p><p>This problem is my first problem in codeforces (since university), and it reminded me of how Olympiad was like :D</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;My Very First CF problemset&lt;/p&gt;</summary>
    
    
    
    <category term="CompetitiveProgramming" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/"/>
    
    <category term="CodeForces" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/"/>
    
    <category term="ProblemSet" scheme="https://wfyishere.github.io/categories/CompetitiveProgramming/CodeForces/ProblemSet/"/>
    
    
    <category term="CPP" scheme="https://wfyishere.github.io/tags/CPP/"/>
    
    <category term="Bruteforce" scheme="https://wfyishere.github.io/tags/Bruteforce/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wfyishere.github.io/2025/01/16/hello-world/"/>
    <id>https://wfyishere.github.io/2025/01/16/hello-world/</id>
    <published>2025-01-16T10:52:21.264Z</published>
    <updated>2025-01-16T10:52:21.264Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
